import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from scipy.stats import pearsonr
import numpy as np

# Load your predictions and experimental values
data = pd.read_csv('/Users/xinawang/chemprop/CYP2D6_preds.csv')  # CSV file generated by chemprop_predict

# Assuming the CSV has columns 'true' for experimental and 'pred' for predicted values
true_values = data['CYP2D6_inhibition']
predicted_values = data['pred_0']

# Create the parity plot
plt.figure(figsize=(6, 6))
plt.scatter(true_values, predicted_values, color='blue', label='Predictions')
plt.plot([min(true_values), max(true_values)], [min(true_values), max(true_values)], color='red', linestyle='--', label='Perfect fit')
plt.xlabel('Experimental IC50')
plt.ylabel('Predicted IC50')
plt.title('Parity Plot: Experimental vs. Predicted IC50')
plt.legend()
plt.show()

# Calculate MAE
mae = mean_absolute_error(true_values, predicted_values)
print(f'MAE: {mae:.4f}')

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(true_values, predicted_values))
print(f'RMSE: {rmse:.4f}')

# Calculate R2
r2 = r2_score(true_values, predicted_values)
print(f'R2: {r2:.4f}')

# Calculate Pearson R2
pearson_r, _ = pearsonr(true_values, predicted_values)
pearson_r2 = pearson_r ** 2
print(f'Pearson R2: {pearson_r2:.4f}')
